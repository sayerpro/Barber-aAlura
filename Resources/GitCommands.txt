Para ver la versión actual instalada de git en el sistema
git --version

Para iniciar un repositorio en la ruta local
git init

Rastrea el estado del repositorio el monitoreo de archivos, cambios y commits
git status

Agrega los cambios recientes para que sean tenidos encuenta en el siguiente commit
git add <file> o . para tener en cuenta todo

Descarta todos los cambios generados
git restore <file> o . para tener en cuenta todo

Devolver cambios u archivos de un add .
git restore --staged <file>  o . para tener en cuenta todo

Devolver cambios u archivos de un commit
git revert <hash del commit>

Para dejar de monitorear un archivo
git rm --cached <file> o . para tener en cuenta todo

Para hacer commit y guardar todos las cambios con una versión en el repositorio
git commit -m "descripcion commit"

Comando para hacer la configuración inicial de git, debe usarse para que git sepa quien esta haciendo los cambios "El autor" (tambien se puede usar con local para especificar quien lo hace en el repositorio especifico)
git config --global user.email "email"
git config --global user.name "nombre"

Ver información listada de los commits hechos
git log
git log --oneline para ver todos los cambios de una sola linea
git log -p        ver cambios realizados en los archivos (presiona enter para ver commits anteriores)
:q o :x                para salir del -p
git log --pretty="format:%h <formatos de busqueda>"
git log --graph ver de forma mas visual
git log -n # vespecificar cuantos commits quiere ver

Para ignorar archivos o carpetas que no queremos en nuestro repositorio debemos usar el archivo .gitignore y escribir las rutas, archivos y carpetas que no queremos
Para mas usos(https://devhints.io/git-log)

Crear repositorio para guardar solo los cambios de otros repositorios un servidor "PURO"
git init --bare

Agregar repositorio remoto
git remote add <name> <ruta>

Ver listado de repositorios remotos
git remote

Ver si esta reconociendo los repositorios remotos
git remote -v

Clonar repositorio remoto
git clone <ruta> <Se le puede especificar un nombre>

Para empujar o subir los cambios guardados en los commits a un repositorio
git push <nombre repositorio remoto> <branch>
git push -u para que siempre que use git push no sea necesario poner el nombre y el branch

Para jalar o bajar los cambios de un repositorio remoto
git pull <nombre repositorio remoto> <branch>

Cambiar el nombre del repositorio remoto para reconocimiento interno
git remote rename <nombre repositorio remoto> <nuevo nombre>

Ingreso con token de acceso para gitHub (Recomendado)
https://www.aluracursos.com/blog/exigendia-autenticacion-por-token

Crear un branch
git branch <nombre>

Cambiar de branch
git checkout <nombre branch>

Crear y moverse de una vez al nuevo branch
git checkout -b <nombre branch>

Ir a un commit, version o cambio anterior
git checkout <hash del commit>

Unir cambios de diferentes ramas(branchs)
git merge <nombre branch> del cual vas a jalar y combinar los cambios

Traer todos los cambios incluyendo los commits del otro branch
git rebase <nombre branch>

Guardar trabajo en progreso no hace add . ni commit
git stash

Ver lista de stash guardados
git stash list

Retomar los cambios del stash
git stash apply #

Eliminar el ultimo stash y lo agrega al mismo tiempo al código
git stash pop

Eliminar stash especifico
git stash drop #

Mostrar diferencia entre dos commits
git diff <desde hash commit>..<hasta hash commit>

Crear bandera de punto de partida para el código
git tag -a <nombre tag v0.1.0> -m "Lanzando la primera version"

Para enviar la tag al repositorio remoto
git push <nombre repositorio remoto> <nombre tag>

Cambiar url del repositorio remoto
git remote set-url <nombre repositorio remoto> <url>
 Cambiar nombre de branch
git branch -m new-name